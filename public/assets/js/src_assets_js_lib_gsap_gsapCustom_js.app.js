"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwebpack_starter_file"] = self["webpackChunkwebpack_starter_file"] || []).push([
    ["src_assets_js_lib_gsap_gsapCustom_js"], {

        /***/
        "./src/assets/js/lib/gsap/gsapCustom.js":
            /*!**********************************************!*\
              !*** ./src/assets/js/lib/gsap/gsapCustom.js ***!
              \**********************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gsapCustom: () => (/* binding */ gsapCustom),\n/* harmony export */   isInViewport: () => (/* binding */ isInViewport)\n/* harmony export */ });\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var split_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! split-type */ \"./node_modules/split-type/dist/index.js\");\n// animations.js\r\n\r\n\r\n\r\n\r\n// Register ScrollTrigger once\r\ngsap__WEBPACK_IMPORTED_MODULE_1__.gsap.registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger);\r\n\r\n// Utility function to check if element is in viewport\r\nconst isInViewport = (element) => {\r\n  const rect = element.getBoundingClientRect();\r\n  return (\r\n    rect.top >= 0 &&\r\n    rect.left >= 0 &&\r\n    rect.bottom <=\r\n      (window.innerHeight || document.documentElement.clientHeight) &&\r\n    rect.right <= (window.innerWidth || document.documentElement.documentWidth)\r\n  );\r\n};\r\n\r\n// Create split text instances only when needed\r\nconst createSplitText = (element, types = \"words,chars\") => {\r\n  if (!element.splitInstance) {\r\n    element.splitInstance = new split_type__WEBPACK_IMPORTED_MODULE_0__[\"default\"](element, {\r\n      types,\r\n      tagName: \"div\",\r\n    });\r\n  }\r\n  return element.splitInstance;\r\n};\r\n\r\n// Batch animations using requestAnimationFrame\r\nconst batchAnimations = (() => {\r\n  const callbacks = new Set();\r\n  let scheduled = false;\r\n\r\n  const run = () => {\r\n    callbacks.forEach((cb) => cb());\r\n    callbacks.clear();\r\n    scheduled = false;\r\n  };\r\n\r\n  return (callback) => {\r\n    callbacks.add(callback);\r\n    if (!scheduled) {\r\n      scheduled = true;\r\n      requestAnimationFrame(run);\r\n    }\r\n  };\r\n})();\r\n\r\n// Shared ScrollTrigger configuration\r\nconst defaultScrollConfig = {\r\n  start: \"top 95%\",\r\n  end: \"bottom 80%\",\r\n  toggleActions: \"play none none none\",\r\n};\r\n\r\n// Main animation function that handles all text split animations\r\nfunction gsapCustom() {\r\n  // Create a single IntersectionObserver for all animations\r\n  const observer = new IntersectionObserver(\r\n    (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          const element = entry.target;\r\n          batchAnimations(() => animateElement(element));\r\n          observer.unobserve(element); // Animate only once\r\n        }\r\n      });\r\n    },\r\n    {\r\n      threshold: 0.1,\r\n      rootMargin: \"50px\",\r\n    }\r\n  );\r\n\r\n  // Animation configurations\r\n  const animations = {\r\n    \"text-split-left\": {\r\n      from: { x: 70, autoAlpha: 0 },\r\n      to: { x: 0, autoAlpha: 1, duration: 0.8, stagger: 0.03 },\r\n    },\r\n    \"text-split-top\": {\r\n      from: { y: -25, rotation: -3, scale: 0.8, autoAlpha: 0 },\r\n      to: {\r\n        y: 0,\r\n        rotation: 0,\r\n        scale: 1,\r\n        autoAlpha: 1,\r\n        duration: 0.8,\r\n        stagger: 0.05,\r\n        ease: \"elastic.out(1, 0.7)\",\r\n      },\r\n    },\r\n    \"text-split-bottom\": {\r\n      from: { y: 50, autoAlpha: 0 },\r\n      to: {\r\n        y: 0,\r\n        autoAlpha: 1,\r\n        duration: 0.8,\r\n        stagger: 0.05,\r\n        ease: \"elastic.out(1, 0.7)\",\r\n      },\r\n    },\r\n    \"text-split-lines\": {\r\n      from: { y: 100, autoAlpha: 0 },\r\n      to: {\r\n        y: 0,\r\n        autoAlpha: 1,\r\n        duration: 1,\r\n        stagger: 0.05,\r\n        ease: \"back.inOut\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Find all elements to animate\r\n  Object.keys(animations).forEach((className) => {\r\n    document.querySelectorAll(`.${className}`).forEach((element) => {\r\n      observer.observe(element);\r\n    });\r\n  });\r\n\r\n  // Function to animate a single element\r\n  function animateElement(element) {\r\n    // Determine animation type from class\r\n    const animationType = Object.keys(animations).find((key) =>\r\n      element.classList.contains(key)\r\n    );\r\n    if (!animationType) return;\r\n\r\n    const config = animations[animationType];\r\n    const splitType = animationType === \"text-split-lines\" ? \"lines\" : \"chars\";\r\n\r\n    try {\r\n      const split = createSplitText(element, `words,${splitType}`);\r\n      const targets = split[splitType];\r\n\r\n      if (targets) {\r\n        gsap__WEBPACK_IMPORTED_MODULE_1__.gsap.fromTo(targets, config.from, {\r\n          ...config.to,\r\n          scrollTrigger: {\r\n            trigger: element,\r\n            ...defaultScrollConfig,\r\n          },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Animation failed for element:`, element, error);\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://webpack-starter-file/./src/assets/js/lib/gsap/gsapCustom.js?");

                /***/
            })

    }
]);